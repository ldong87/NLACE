/* We illustrate the operation of the code using the problem

        min \sum_{i=1}^n  exp (x [i]) - sqrt (i)*x [i] ;
        subject to 0 <= x <= 1

   We solve the problem 3 times using different parameter setting.
   On a linux workstation, the final statistics generated by driver1
   were as follows:

Final convergence status = 0
Convergence tolerance for gradient satisfied
projected gradient max norm: 5.642870e-09
function value:             -4.011035e+02

Total cg  iterations:                    8
Total cg  function evaluations:         13
Total cg  gradient evaluations:         13
Total cbb iterations:                    5
Total cbb function evaluations:          6
Total cbb gradient evaluations:          6
------------------------------------------
Total function evaluations:             19
Total gradient evaluations:             19
==========================================

See the drivers in the distribution of cg_descent Version 3.0
for more examples.

The principal change in Version1.1 is to pass a structure
asa_objective to the user evaluation routines.
This allows asa_cg to pass more information to the user which
might be used to speedup his routines to evaluate the objective
function and its gradient.  Two elements of the structure are
ifree and nfree.  If ifree is not NULL, then ifree is a pointer
to an integer array containing the indices of the free variables
while nfree is the number of free variables. The structure also
contains a pointer to the array x where the objective function or
gradient is to be evaluated, the problem dimension n, and a pointer
to the array g where the gradient should be stored */

#include <math.h>
#include "asa_user.h" /* needed by the program which calls asa_cg*/

/* prototypes for the function and gradient evaluation routines */
double myvalue (asa_objective *asa) ;

void mygrad (asa_objective *asa) ;

double myvalgrad (asa_objective *asa) ;

void driver_asa_cg_ (int *nn,double *xx,double *low,double *hig,double *mmiter) ;

int main (void)/*pass n, x, lo, hi, */
{
    double *x, *lo, *hi ;
    int i, n ;
    double miter ;


    /* allocate arrays for problem solution and bounds */
    n = 100 ; /* problem dimension */
    x  = (double *) malloc (n*sizeof (double)) ;
    lo = (double *) malloc (n*sizeof (double)) ;
    hi = (double *) malloc (n*sizeof (double)) ;
    for (i = 0; i < n; i++) lo [i] = (double) 0 ;
    for (i = 0; i < n; i++) hi [i] = (double) 1 ;
    for (i = 0; i < n; i++) x[i] = (double) 1;
    miter = 3.0; 
    driver_asa_cg_(&n,x,lo,hi,&miter);

    fprintf(stdout,"%s\n","values of solution:");
    for (i=0;i<n;i++) fprintf(stdout,"%e    ",x[i]);
    fprintf(stdout,"\n");

    free (x) ;
    free (lo) ;
    free (hi) ;

    return(1);
}


